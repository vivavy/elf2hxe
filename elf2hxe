#!/bin/env python3

import sys, json


ABI_ERROR = 0
ABI_NONE = 1
ABI_HEXOS = 2
ABI_LINUX = 3
ABI_WINDOWS = 4

ARCH_ERROR = 0
ARCH_NONE = 1
ARCH_X86 = 2
ARCH_X86_64 = 3
ARCH_ARM = 4
ARCH_AARCH64 = 5
ARCH_8086 = 6
ARCH_MIPS = 7
ARCH_PPC = 8
ARCH_SPARC = 9
ARCH_M68K = 10
ARCH_MIPS64 = 11
ARCH_PPC64 = 12
ARCH_SPARC64 = 13

TYPE_ERROR = 0
TYPE_NONE = 1
TYPE_EXECUTABLE = 2
TYPE_DYNAMIC = 3
TYPE_STATIC = 4


if __name__ == '__main__':
    if len(sys.argv) != 4 if not 'py' in sys.argv[0] else 5:
        print("usage: elf2hxe <input> <output> <config>")
        sys.exit(1)

    fi, fo, cf = sys.argv[-3:]

    with open(fi, 'rb') as f:
        data = f.read()

    with open(cf, 'rt') as f:
        config = json.load(f)

    byteorder = config.get('byteorder', 'little')

    header = b'HXE\x7f'
    version = b'\x03'
    abi = config.get('abi', ABI_NONE).to_bytes(1, byteorder)
    arch = config.get('arch', ARCH_NONE).to_bytes(1, byteorder)
    type = config.get('type', TYPE_NONE).to_bytes(1, byteorder)
    size = len(data).to_bytes(8, byteorder)
    entry = data[0x18:][:8]
    checksum = (((int.from_bytes(entry, byteorder) + 1213744384) >>
                int.from_bytes(abi, byteorder) * 0x70 ^ 1163413631) & (2**63-1)).to_bytes(8, byteorder)
    footer = b'EXH\x7f'

    hdr = header + version + abi + arch + type + size + entry + checksum + footer

    do = hdr + data[36:]

    with open(fo, 'wb') as f:
        f.write(do)
